// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

// Pour SQLITE
// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// NEXTAUTH
model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?
  scope              String?
  id_token           String? 
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @map("session_token") @unique
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// APPLICATION
model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  username             String
  bio                   String?
  link                  String?

  follows              Follow[] @relation("follower")
  followeds           Follow[] @relation("followed")
  posts                Post[]
  likes                Like[]  
  accounts              Account[]
  sessions              Session[]

  @@map("users")
}

model Post {
  id           String   @id @default(cuid())
  userId       String
  parentId     String?
  title        String
  content      String
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes        Like[]
  replies     Post[]   @relation("comments")  
  parent     Post?    @relation("comments", fields: [parentId], references: [id], onDelete: Cascade)

  @@map("posts")

}

model Like {
  id           String   @id @default(cuid())
  userId       String
  postId       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Follow {
  id           String   @id @default(cuid())
  followerId   String  
  followingId  String  
  createdAt    DateTime @default(now())
  follower     User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed    User     @relation("followed", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
